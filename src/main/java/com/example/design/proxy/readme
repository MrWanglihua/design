笔记整理：
代理模式分为：静态代理和动态代理（jdk和cglib）
1、静态代理：采用手动添加的方式来增强原有方法
2、动态代理：
    jdk（必须有实现接口）:通过反射机制，回调接口中方法，覆盖原有方法，在调用代理类中增强的方法，以实现代理
    cglib:通过生成一个类继承被代理的类，来实现功能增强
 3、静态代理和动态的本质区别
    1、静态代理只能通过手动完成代理操作，如果被代理类增加新的方法，代理类需要同步
    新增，违背开闭原则。
    2、动态代理采用在运行时动态生成代码的方式，取消了对被代理类的扩展限制，遵循开
    闭原则。
    3、若动态代理要对目标类的增强逻辑扩展，结合策略模式，只需要新增策略类便可完成，
    无需修改代理类的代码。
4、代理模式的优缺点
使用代理模式具有以下几个优点：
1、代理模式能将代理对象与真实被调用的目标对象分离。
2、一定程度上降低了系统的耦合度，扩展性好。
3、可以起到保护目标对象的作用。
4、可以对目标对象的功能增强。
当然，代理模式也是有缺点的：
1、代理模式会造成系统设计中类的数量增加。
2、在客户端和目标对象增加一个代理对象，会造成请求处理速度变慢。
3、增加了系统的复杂度


1、仿JDK动态代理实现原理，自己手写一遍。
    答：参见本文件工程
2、思考：为什么JDK动态代理中要求目标类实现的接口数量不能超过65535个？
    答：class文件中有一项interfaces_count，使用u2类型存储。u2类型占用2个字节，每个字节8位，一共16位。
    16位存储的最大值为2的16次方=65536，减去一位标记位得65535。超出这个数则class文件无法存储。
3、结合自身的业务场景用代理模式进行重构。
    客户问题：系统报错提示看不懂。
    排查：发现大量业务类中，各种异常直接new runtimeexception...
    分析：直接在代码里转换工作量太大，而且业务耦合度很高。是否有一些办法能够集中处理异常信息？
    思路：可以在进业务代码前做一层增强。用以捕获异常信息并做转换。代理模式刚好能够解决这个问题。
    于是我配置了全局代理，将获取的异常按错误码转换为文字提示。只提交了一个类，所有异常都转换为正常文字提示。

    客户问题：采用springmvc框架，页面来值的非空检查
    排查：只要涉及到页面输入的都需要做检查，
    分析：各自交易的修改，会造成大量的代码修改，而且耦合度很高，处理起来还很繁琐
    思路：可以在处理消息前对代码做增强。通过获取文件传来的值，检查来值是否为空是否为null,通过注解的方式取得属性名称，来反射提示
